'------------------------------------------------------------------------------
' <auto-generated>
'     "Modeler"
'     "1.4.27492"
' </auto-generated>
'------------------------------------------------------------------------------

Namespace VITAL.Auto


#Region " - "

    ''' <summary>
    ''' .
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class 
        Inherits Raw.(Of VITAL.)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.~TEMP636291757526019432)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table ~TEMP636291757526019432.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table ~TEMP636291757526019432.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table ~TEMP636291757526019432.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table ~TEMP636291757526019432.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If l_o_qry.ExecuteSave(Tables.~TEMP636291757526019432, IsNew) > 0 Then
                HasChanges = False
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table ~TEMP636291757526019432.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table ~TEMP636291757526019432.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.ExecuteDelete(Tables.~TEMP636291757526019432)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe .</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL..GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe .</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.) As String
            Dim l_s_key As New System.Text.StringBuilder
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.) As object()
            Dim l_o_pkColumns As New List(Of Object)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Adopter - Adopter : Associations etre propriétaire et animal"

    ''' <summary>
    ''' Adopter : Associations etre propriétaire et animal.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Adopter
        Inherits Raw.Adopter(Of VITAL.Adopter)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_ADOPTER)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_ADOPTER.VTL_ADOPTER_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_ADOPTER.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_ADOPTER.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_ADOPTER.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_ADOPTER.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_ADOPTER.VTL_ADOPTER_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_ADOPTER.VTL_ADOPTER_ID, ID)
            End If
            l_o_qry.AddTypedValue(VITAL.VTL_ADOPTER.VTL_ADOPTER_DT_DEBUT, Dt_debut)
            l_o_qry.AddTypedValue(VITAL.VTL_ADOPTER.VTL_ADOPTER_DT_FIN, Dt_fin)
            l_o_qry.AddValue(VITAL.VTL_ADOPTER.VTL_ADOPTER_ID_PROPRIETAIRE, NullIfValue(Id_proprietaire, 0))
            l_o_qry.AddValue(VITAL.VTL_ADOPTER.VTL_ADOPTER_ID_ANIMAL, NullIfValue(Id_animal, 0))
            If l_o_qry.ExecuteSave(Tables.VTL_ADOPTER, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_ADOPTER.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_ADOPTER.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_ADOPTER.VTL_ADOPTER_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_ADOPTER)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Adopter.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Adopter.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_ADOPTER.VTL_ADOPTER_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Adopter.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Adopter) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_ADOPTER_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Adopter) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Adopter)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Animal - Animal"

    ''' <summary>
    ''' Animal.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Animal
        Inherits Raw.Animal(Of VITAL.Animal)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_ANIMAL)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_ANIMAL.VTL_ANIMAL_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_ANIMAL.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_ANIMAL.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_ANIMAL.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_ANIMAL.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_ANIMAL.VTL_ANIMAL_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_ANIMAL.VTL_ANIMAL_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_ANIMAL.VTL_ANIMAL_NOM, TextSQL(Nom))
            l_o_qry.AddValue(VITAL.VTL_ANIMAL.VTL_ANIMAL_NUM_PUCE, TextSQL(Num_puce))
            l_o_qry.AddTypedValue(VITAL.VTL_ANIMAL.VTL_ANIMAL_DT_NAISSANCE, Dt_naissance)
            l_o_qry.AddTypedValue(VITAL.VTL_ANIMAL.VTL_ANIMAL_DT_DECES, Dt_deces)
            l_o_qry.AddValue(VITAL.VTL_ANIMAL.VTL_ANIMAL_ID_RACE, NullIfValue(Id_race, 0))
            l_o_qry.AddValue(VITAL.VTL_ANIMAL.VTL_ANIMAL_ID_CARTE, NullIfValue(Id_carte, 0))
            l_o_qry.AddValue(VITAL.VTL_ANIMAL.VTL_ANIMAL_ID_TYPE, NullIfValue(Id_type, 0))
            If l_o_qry.ExecuteSave(Tables.VTL_ANIMAL, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_ANIMAL.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_ANIMAL.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_ANIMAL.VTL_ANIMAL_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_ANIMAL)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Animal.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Animal.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_ANIMAL.VTL_ANIMAL_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Animal.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Animal) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_ANIMAL_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Animal) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Animal)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Assurance - Assurance"

    ''' <summary>
    ''' Assurance.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Assurance
        Inherits Raw.Assurance(Of VITAL.Assurance)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_ASSURANCE)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_ASSURANCE.VTL_ASSURANCE_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_ASSURANCE.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_ASSURANCE.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_ASSURANCE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_ASSURANCE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_ASSURANCE.VTL_ASSURANCE_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_ASSURANCE.VTL_ASSURANCE_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_ASSURANCE.VTL_ASSURANCE_NOM, TextSQL(Nom))
            l_o_qry.AddValue(VITAL.VTL_ASSURANCE.VTL_ASSURANCE_SIRET, TextSQL(Siret))
            If l_o_qry.ExecuteSave(Tables.VTL_ASSURANCE, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_ASSURANCE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_ASSURANCE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_ASSURANCE.VTL_ASSURANCE_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_ASSURANCE)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Assurance.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Assurance.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_ASSURANCE.VTL_ASSURANCE_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Assurance.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Assurance) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_ASSURANCE_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Assurance) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Assurance)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Carte - Carte vitale"

    ''' <summary>
    ''' Carte vitale.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Carte
        Inherits Raw.Carte(Of VITAL.Carte)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_CARTE)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_CARTE.VTL_CARTE_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_CARTE.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_CARTE.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_CARTE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_CARTE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_CARTE.VTL_CARTE_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_CARTE.VTL_CARTE_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_CARTE.VTL_CARTE_NUMERO, TextSQL(Numero))
            If l_o_qry.ExecuteSave(Tables.VTL_CARTE, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_CARTE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_CARTE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_CARTE.VTL_CARTE_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_CARTE)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Carte.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Carte.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_CARTE.VTL_CARTE_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Carte.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Carte) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_CARTE_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Carte) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Carte)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Consultation - Consultation vétérinaire d'un animal"

    ''' <summary>
    ''' Consultation vétérinaire d'un animal.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Consultation
        Inherits Raw.Consultation(Of VITAL.Consultation)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_CONSULTATION)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_CONSULTATION.VTL_CONSULTATION_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_CONSULTATION.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_CONSULTATION.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_CONSULTATION.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_CONSULTATION.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_CONSULTATION.VTL_CONSULTATION_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_CONSULTATION.VTL_CONSULTATION_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_CONSULTATION.VTL_CONSULTATION_DT_CONSULTATION, DB.SqlDateTime(Dt_consultation))
            l_o_qry.AddTypedValue(VITAL.VTL_CONSULTATION.VTL_CONSULTATION_MONTANT, Montant)
            l_o_qry.AddValue(VITAL.VTL_CONSULTATION.VTL_CONSULTATION_COMMENTAIRE, StrToBlob(Commentaire))
            l_o_qry.AddValue(VITAL.VTL_CONSULTATION.VTL_CONSULTATION_ID_VETERINAIRE, NullIfValue(Id_veterinaire, 0))
            l_o_qry.AddValue(VITAL.VTL_CONSULTATION.VTL_CONSULTATION_L, NullIfValue(Id_animal, 0))
            l_o_qry.AddValue(VITAL.VTL_CONSULTATION.VTL_CONSULTATION_ID_PROPRIETAIRE, NullIfValue(Id_proprietaire, 0))
            If l_o_qry.ExecuteSave(Tables.VTL_CONSULTATION, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_CONSULTATION.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_CONSULTATION.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_CONSULTATION.VTL_CONSULTATION_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_CONSULTATION)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Consultation.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Consultation.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_CONSULTATION.VTL_CONSULTATION_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Consultation.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Consultation) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_CONSULTATION_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Consultation) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Consultation)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Contrat - Contrat d'assurance"

    ''' <summary>
    ''' Contrat d'assurance.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Contrat
        Inherits Raw.Contrat(Of VITAL.Contrat)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_CONTRAT)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_CONTRAT.VTL_CONTRAT_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_CONTRAT.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_CONTRAT.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_CONTRAT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_CONTRAT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_CONTRAT.VTL_CONTRAT_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_CONTRAT.VTL_CONTRAT_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_CONTRAT.VTL_CONTRAT_NUM_CONTRAT, TextSQL(Num_contrat))
            l_o_qry.AddTypedValue(VITAL.VTL_CONTRAT.VTL_CONTRAT_DT_DEBUT, Dt_debut)
            l_o_qry.AddTypedValue(VITAL.VTL_CONTRAT.VTL_CONTRAT_DT_FIN, Dt_fin)
            l_o_qry.AddValue(VITAL.VTL_CONTRAT.VTL_CONTRAT_ID_ANIMAL, NullIfValue(Id_animal, 0))
            l_o_qry.AddValue(VITAL.VTL_CONTRAT.VTL_CONTRAT_ID_PROPRIETAIRE, NullIfValue(Id_proprietaire, 0))
            l_o_qry.AddValue(VITAL.VTL_CONTRAT.VTL_CONTRAT_ID_ASSURANCE, NullIfValue(Id_assurance, 0))
            If l_o_qry.ExecuteSave(Tables.VTL_CONTRAT, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_CONTRAT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_CONTRAT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_CONTRAT.VTL_CONTRAT_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_CONTRAT)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Contrat.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Contrat.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_CONTRAT.VTL_CONTRAT_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Contrat.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Contrat) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_CONTRAT_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Contrat) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Contrat)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Histo_Poids - Historique du poids de l'animal"

    ''' <summary>
    ''' Historique du poids de l'animal.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Histo_Poids
        Inherits Raw.Histo_Poids(Of VITAL.Histo_Poids)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_HISTO_POIDS)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_HISTO_POIDS.VTL_HISTO_POIDS_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_HISTO_POIDS.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_HISTO_POIDS.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_HISTO_POIDS.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_HISTO_POIDS.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_HISTO_POIDS.VTL_HISTO_POIDS_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_HISTO_POIDS.VTL_HISTO_POIDS_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_HISTO_POIDS.VTL_HISTO_POIDS_DT_HISTO, DB.SqlDateTime(Dt_histo))
            l_o_qry.AddTypedValue(VITAL.VTL_HISTO_POIDS.VTL_HISTO_POIDS_POIDS, Poids)
            l_o_qry.AddTypedValue(VITAL.VTL_HISTO_POIDS.VTL_HISTO_POIDS_ID_ANIMAL, Id_animal)
            If l_o_qry.ExecuteSave(Tables.VTL_HISTO_POIDS, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_HISTO_POIDS.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_HISTO_POIDS.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_HISTO_POIDS.VTL_HISTO_POIDS_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_HISTO_POIDS)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Histo_Poids.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Histo_Poids.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_HISTO_POIDS.VTL_HISTO_POIDS_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Histo_Poids.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Histo_Poids) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_HISTO_POIDS_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Histo_Poids) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Histo_Poids)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Histo_Taille - Historique de la taille de l'animal"

    ''' <summary>
    ''' Historique de la taille de l'animal.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Histo_Taille
        Inherits Raw.Histo_Taille(Of VITAL.Histo_Taille)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_HISTO_TAILLE)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_HISTO_TAILLE.VTL_HISTO_TAILLE_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_HISTO_TAILLE.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_HISTO_TAILLE.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_HISTO_TAILLE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_HISTO_TAILLE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_HISTO_TAILLE.VTL_HISTO_TAILLE_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_HISTO_TAILLE.VTL_HISTO_TAILLE_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_HISTO_TAILLE.VTL_HISTO_TAILLE_DT_HISTO, DB.SqlDateTime(Dt_histo))
            l_o_qry.AddTypedValue(VITAL.VTL_HISTO_TAILLE.VTL_HISTO_TAILLE_TAILLE, Taille)
            l_o_qry.AddTypedValue(VITAL.VTL_HISTO_TAILLE.VTL_HISTO_TAILLE_ID_ANIMAL, Id_animal)
            If l_o_qry.ExecuteSave(Tables.VTL_HISTO_TAILLE, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_HISTO_TAILLE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_HISTO_TAILLE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_HISTO_TAILLE.VTL_HISTO_TAILLE_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_HISTO_TAILLE)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Histo_Taille.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Histo_Taille.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_HISTO_TAILLE.VTL_HISTO_TAILLE_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Histo_Taille.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Histo_Taille) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_HISTO_TAILLE_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Histo_Taille) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Histo_Taille)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Medicament - Medicament"

    ''' <summary>
    ''' Medicament.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Medicament
        Inherits Raw.Medicament(Of VITAL.Medicament)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_MEDICAMENT)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_MEDICAMENT.VTL_MEDICAMENT_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_MEDICAMENT.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_MEDICAMENT.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_MEDICAMENT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_MEDICAMENT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_MEDICAMENT.VTL_MEDICAMENT_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_MEDICAMENT.VTL_MEDICAMENT_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_MEDICAMENT.VTL_MEDICAMENT_LIBELLE, TextSQL(Libelle))
            l_o_qry.AddValue(VITAL.VTL_MEDICAMENT.VTL_MEDICAMENT_DOSAGE, TextSQL(Dosage))
            l_o_qry.AddTypedValue(VITAL.VTL_MEDICAMENT.VTL_MEDICAMENT_DUREE_MOYENNE_JOUR, Duree_moyenne_jour)
            If l_o_qry.ExecuteSave(Tables.VTL_MEDICAMENT, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_MEDICAMENT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_MEDICAMENT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_MEDICAMENT.VTL_MEDICAMENT_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_MEDICAMENT)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Medicament.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Medicament.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_MEDICAMENT.VTL_MEDICAMENT_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Medicament.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Medicament) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_MEDICAMENT_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Medicament) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Medicament)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Position - Position de l'animal"

    ''' <summary>
    ''' Position de l'animal.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Position
        Inherits Raw.Position(Of VITAL.Position)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_POSITION)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_POSITION.VTL_POSITION_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_POSITION.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_POSITION.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_POSITION.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_POSITION.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_POSITION.VTL_POSITION_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_POSITION.VTL_POSITION_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_POSITION.VTL_POSITION_DT_POSITION, DB.SqlDateTime(Dt_position))
            l_o_qry.AddValue(VITAL.VTL_POSITION.VTL_POSITION_COORD_LAT, TextSQL(Coord_lat))
            l_o_qry.AddValue(VITAL.VTL_POSITION.VTL_POSITION_COORD_LONG, TextSQL(Coord_long))
            l_o_qry.AddTypedValue(VITAL.VTL_POSITION.VTL_POSITION_TOP_COURANTE, Top_courante)
            l_o_qry.AddValue(VITAL.VTL_POSITION.VTL_POSITION_ID_ANIMAL, NullIfValue(Id_animal, 0))
            If l_o_qry.ExecuteSave(Tables.VTL_POSITION, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_POSITION.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_POSITION.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_POSITION.VTL_POSITION_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_POSITION)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Position.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Position.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_POSITION.VTL_POSITION_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Position.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Position) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_POSITION_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Position) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Position)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "PropriEtaire - Propriétaire"

    ''' <summary>
    ''' Propriétaire.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class PropriEtaire
        Inherits Raw.PropriEtaire(Of VITAL.PropriEtaire)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_PROPRIETAIRE)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_PROPRIETAIRE.VTL_PROPRIETAIRE_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_PROPRIETAIRE.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_PROPRIETAIRE.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_PROPRIETAIRE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_PROPRIETAIRE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_PROPRIETAIRE.VTL_PROPRIETAIRE_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_PROPRIETAIRE.VTL_PROPRIETAIRE_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_PROPRIETAIRE.VTL_PROPRIETAIRE_NOM, TextSQL(Nom))
            l_o_qry.AddValue(VITAL.VTL_PROPRIETAIRE.VTL_PROPRIETAIRE_PRENOM, TextSQL(Prenom))
            If l_o_qry.ExecuteSave(Tables.VTL_PROPRIETAIRE, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_PROPRIETAIRE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_PROPRIETAIRE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_PROPRIETAIRE.VTL_PROPRIETAIRE_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_PROPRIETAIRE)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe PropriEtaire.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.PropriEtaire.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_PROPRIETAIRE.VTL_PROPRIETAIRE_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe PropriEtaire.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.PropriEtaire) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_PROPRIETAIRE_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.PropriEtaire) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.PropriEtaire)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Race - Race de l'animal"

    ''' <summary>
    ''' Race de l'animal.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Race
        Inherits Raw.Race(Of VITAL.Race)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_RACE)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_RACE.VTL_RACE_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_RACE.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_RACE.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_RACE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_RACE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_RACE.VTL_RACE_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_RACE.VTL_RACE_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_RACE.VTL_RACE_NOM, TextSQL(Nom))
            If l_o_qry.ExecuteSave(Tables.VTL_RACE, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_RACE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_RACE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_RACE.VTL_RACE_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_RACE)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Race.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Race.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_RACE.VTL_RACE_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Race.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Race) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_RACE_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Race) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Race)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Traitement_medicament - Liste des médicaments compris dans un traitement"

    ''' <summary>
    ''' Liste des médicaments compris dans un traitement.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Traitement_medicament
        Inherits Raw.Traitement_medicament(Of VITAL.Traitement_medicament)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_TRAITEMENT_MEDICAMENT)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_TRAITEMENT_MEDICAMENT.VTL_TRAITEMENT_MEDICAMENT_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_TRAITEMENT_MEDICAMENT.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_TRAITEMENT_MEDICAMENT.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_TRAITEMENT_MEDICAMENT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_TRAITEMENT_MEDICAMENT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_TRAITEMENT_MEDICAMENT.VTL_TRAITEMENT_MEDICAMENT_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_TRAITEMENT_MEDICAMENT.VTL_TRAITEMENT_MEDICAMENT_ID, ID)
            End If
            l_o_qry.AddTypedValue(VITAL.VTL_TRAITEMENT_MEDICAMENT.VTL_TRAITEMENT_MEDICAMENT_ID_TRAITEMENT, Id_traitement)
            l_o_qry.AddValue(VITAL.VTL_TRAITEMENT_MEDICAMENT.VTL_TRAITEMENT_MEDICAMENT_ID_MEDICAMENT, NullIfValue(Id_medicament, 0))
            l_o_qry.AddTypedValue(VITAL.VTL_TRAITEMENT_MEDICAMENT.VTL_TRAITEMENT_MEDICAMENT_POSOLOGIE, Posologie)
            l_o_qry.AddTypedValue(VITAL.VTL_TRAITEMENT_MEDICAMENT.VTL_TRAITEMENT_MEDICAMENT_DUREE_JOUR, Duree_jour)
            If l_o_qry.ExecuteSave(Tables.VTL_TRAITEMENT_MEDICAMENT, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_TRAITEMENT_MEDICAMENT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_TRAITEMENT_MEDICAMENT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_TRAITEMENT_MEDICAMENT.VTL_TRAITEMENT_MEDICAMENT_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_TRAITEMENT_MEDICAMENT)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Traitement_medicament.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Traitement_medicament.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_TRAITEMENT_MEDICAMENT.VTL_TRAITEMENT_MEDICAMENT_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Traitement_medicament.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Traitement_medicament) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_TRAITEMENT_MEDICAMENT_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Traitement_medicament) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Traitement_medicament)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Traitrement - Traitrement"

    ''' <summary>
    ''' Traitrement.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Traitrement
        Inherits Raw.Traitrement(Of VITAL.Traitrement)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_TRAITREMENT)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_TRAITREMENT.VTL_TRAITREMENT_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_TRAITREMENT.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_TRAITREMENT.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_TRAITREMENT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_TRAITREMENT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_TRAITREMENT.VTL_TRAITREMENT_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_TRAITREMENT.VTL_TRAITREMENT_ID, ID)
            End If
            l_o_qry.AddTypedValue(VITAL.VTL_TRAITREMENT.VTL_TRAITREMENT_DUREE_JOUR, Duree_jour)
            l_o_qry.AddValue(VITAL.VTL_TRAITREMENT.VTL_TRAITREMENT_DT_DEBUT, DB.SqlDateTime(Dt_debut))
            If l_o_qry.ExecuteSave(Tables.VTL_TRAITREMENT, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_TRAITREMENT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_TRAITREMENT.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_TRAITREMENT.VTL_TRAITREMENT_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_TRAITREMENT)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Traitrement.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Traitrement.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_TRAITREMENT.VTL_TRAITREMENT_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Traitrement.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Traitrement) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_TRAITREMENT_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Traitrement) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Traitrement)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Type - Typede l'animal"

    ''' <summary>
    ''' Typede l'animal.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Type
        Inherits Raw.Type(Of VITAL.Type)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_TYPE)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_TYPE.VTL_TYPE_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_TYPE.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_TYPE.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_TYPE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_TYPE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_TYPE.VTL_TYPE_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_TYPE.VTL_TYPE_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_TYPE.VTL_TYPE_LIBELLE, TextSQL(Libelle))
            If l_o_qry.ExecuteSave(Tables.VTL_TYPE, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_TYPE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_TYPE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_TYPE.VTL_TYPE_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_TYPE)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Type.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Type.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_TYPE.VTL_TYPE_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Type.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Type) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_TYPE_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Type) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Type)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Vaccin - Vaccin"

    ''' <summary>
    ''' Vaccin.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Vaccin
        Inherits Raw.Vaccin(Of VITAL.Vaccin)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_VACCIN)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_VACCIN.VTL_VACCIN_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_VACCIN.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_VACCIN.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_VACCIN.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_VACCIN.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_VACCIN.VTL_VACCIN_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_VACCIN.VTL_VACCIN_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_VACCIN.VTL_VACCIN_LIBELLE, TextSQL(Libelle))
            l_o_qry.AddTypedValue(VITAL.VTL_VACCIN.VTL_VACCIN_TOP_PERIODIQUE, Top_periodique)
            l_o_qry.AddTypedValue(VITAL.VTL_VACCIN.VTL_VACCIN_PERIODE_MOIS, Periode_mois)
            l_o_qry.AddTypedValue(VITAL.VTL_VACCIN.VTL_VACCIN_TOP_RECOMMANDATION, Top_recommandation)
            If l_o_qry.ExecuteSave(Tables.VTL_VACCIN, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_VACCIN.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_VACCIN.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_VACCIN.VTL_VACCIN_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_VACCIN)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Vaccin.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Vaccin.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_VACCIN.VTL_VACCIN_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Vaccin.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Vaccin) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_VACCIN_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Vaccin) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Vaccin)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Vaccination - Vaccination d'un animal"

    ''' <summary>
    ''' Vaccination d'un animal.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Vaccination
        Inherits Raw.Vaccination(Of VITAL.Vaccination)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_VACCINATION)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_VACCINATION.VTL_VACCINATION_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_VACCINATION.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_VACCINATION.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_VACCINATION.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_VACCINATION.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_VACCINATION.VTL_VACCINATION_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_VACCINATION.VTL_VACCINATION_ID, ID)
            End If
            l_o_qry.AddTypedValue(VITAL.VTL_VACCINATION.VTL_VACCINATION_ID_ANIMAL, Id_animal)
            l_o_qry.AddValue(VITAL.VTL_VACCINATION.VTL_VACCINATION_ID_VACCIN, NullIfValue(Id_vaccin, 0))
            l_o_qry.AddTypedValue(VITAL.VTL_VACCINATION.VTL_VACCINATION_DT_VACCIN, Dt_vaccin)
            l_o_qry.AddValue(VITAL.VTL_VACCINATION.VTL_VACCINATION_ID_CONSULTATION, NullIfValue(Id_consultation, 0))
            If l_o_qry.ExecuteSave(Tables.VTL_VACCINATION, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_VACCINATION.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_VACCINATION.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_VACCINATION.VTL_VACCINATION_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_VACCINATION)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Vaccination.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Vaccination.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_VACCINATION.VTL_VACCINATION_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Vaccination.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Vaccination) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_VACCINATION_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Vaccination) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Vaccination)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

#Region "Veterinaire - Veterinaire"

    ''' <summary>
    ''' Veterinaire.
    ''' </summary>
    <Serializable()> _
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Modeler", "1.4")> _
    Public MustInherit Class Veterinaire
        Inherits Raw.Veterinaire(Of VITAL.Veterinaire)

#Region "Variables privées"

        ''' <summary>
        ''' Indique s'il s'agit d'un élément chargé à partir de la base de données.
        ''' </summary>
        Private m_b_update As Boolean = False

#End Region

#Region "Propriétés publiques"

        ''' <summary>
        ''' Indique si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregistrement sera mis à jour.
        ''' </summary>
        ''' <value>
        '''   <c>true</c> si lors de l'appel à la méthode <c>Save</c>, un enregistrement devra être ajouté. Sinon l'enregestement sera mis à jour.
        ''' </value>
        Public Property IsNew As Boolean
            Get
                Return Not m_b_update
            End Get
            Set(value As Boolean)
                m_b_update = Not value
            End Set
        End Property

#End Region

#Region "Méthodes publiques"

        ''' <summary>
        ''' Initialization par défaut avec les valeurs définies via Modeler
        ''' </summary>
        Protected Sub InitDefaultValues()
            ' Initialization par défaut avec les valeurs définies via Modeler 

            ' Initialisation des valeurs de propriétés 
            OnInitDefaultValues()
        End Sub

        ''' <summary> Post-initialisation en fin d'appel du ou des constructeurs de classe. 
        ''' Permet de surcharger les valeurs par défaut des propriétés.
        ''' </summary>
        Public Overridable Sub OnInitDefaultValues()
            ' Placer ici les surcharges de valeurs par défaut des propriétés
        End Sub

        ''' <summary>
        ''' Retourne la requête retournant tous les élements.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        ''' <returns>Tous les éléments</returns>
        Public Shared Function GetAll(Optional p_o_trans As Transaction = Nothing) As Query
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddFrom(Tables.VTL_VETERINAIRE)
            Return l_o_qry
        End Function

        ''' <summary>
        ''' Retourne la ligne de données correspondant à l'enregistrement.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Friend Shared Function FindDR(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing) As DataRow
            If HasCache Then
                Return CacheDt(p_o_trans).Rows.Find(New Object() {p_i_iD})
            Else
                Dim l_o_qry As Query = GetAll(p_o_trans)
                l_o_qry.AddWhereIs(VITAL.VTL_VETERINAIRE.VTL_VETERINAIRE_ID, p_i_iD)
                Return l_o_qry.GetFirstRow()
            End If
        End Function

        ''' <summary>
        ''' Chargement des informations à partir la table VTL_VETERINAIRE.
        ''' </summary>
        ''' <param name="p_i_iD">ID.</param>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overloads Sub Load(p_i_iD As Integer, Optional p_o_trans As Transaction = Nothing)
            Load(FindDR(p_i_iD, p_o_trans))
        End Sub

        ''' <summary>
        ''' Chargement des informations à partir de la table VTL_VETERINAIRE.
        ''' </summary>
        ''' <param name="p_o_row">Enregistrement.</param>
        Public Overrides Sub Load(p_o_row As DataRow)
            MyBase.Load(p_o_row)
            IsNew = False
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_VETERINAIRE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(Optional p_o_trans As Transaction = Nothing)
            Save(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Enregistrer les informations dans la table VTL_VETERINAIRE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Save(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            If Not IsNew And Not HasChanges Then Exit Sub
            If IsNew Then
                l_o_qry.SetKeyAuto(VITAL.VTL_VETERINAIRE.VTL_VETERINAIRE_ID)
            Else
                l_o_qry.AddTypedKey(VITAL.VTL_VETERINAIRE.VTL_VETERINAIRE_ID, ID)
            End If
            l_o_qry.AddValue(VITAL.VTL_VETERINAIRE.VTL_VETERINAIRE_NOM, TextSQL(Nom))
            l_o_qry.AddValue(VITAL.VTL_VETERINAIRE.VTL_VETERINAIRE_PRENOM, TextSQL(Prenom))
            l_o_qry.AddValue(VITAL.VTL_VETERINAIRE.VTL_VETERINAIRE_SIRET, TextSQL(SIRET))
            If l_o_qry.ExecuteSave(Tables.VTL_VETERINAIRE, IsNew) > 0 Then
                HasChanges = False
                If IsNew Then SetAutoId(CInt(l_o_qry.NewAutoID))
                IsNew = False

                CacheUpdate(False)
            Else
                Throw New Exception("#BO_CANT_SAVE")
            End If
        End Sub

        ''' <summary>
        ''' Annule les changements apportés a l'objet
        ''' </summary>
        ''' <param name="p_o_trans">Transaction a utiliser</param>
        Public Overridable Sub Cancel(Optional p_o_trans As Transaction = Nothing)
            Load(
            ID,
            p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_VETERINAIRE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(Optional p_o_trans As Transaction = Nothing)
            Delete(True, p_o_trans)
        End Sub

        ''' <summary>
        ''' Supprime l'enregistrement de la table VTL_VETERINAIRE.
        ''' </summary>
        ''' <param name="p_o_trans">Transaction à utiliser.</param>
        Public Overridable Sub Delete(p_b_saveHisto As Boolean, Optional p_o_trans As Transaction = Nothing)
            Dim l_o_qry As New Query(DB, p_o_trans)

            l_o_qry.AddWhereIs(VITAL.VTL_VETERINAIRE.VTL_VETERINAIRE_ID, ID)
            l_o_qry.ExecuteDelete(Tables.VTL_VETERINAIRE)
            CacheUpdate(True)
        End Sub

#End Region

#Region "Cache"

        ''' <summary>
        ''' Cache Datatable
        ''' </summary>
        Private Shared m_o_cacheDt As Datatable = Nothing

        ''' <summary>
        ''' Cache Lock
        ''' </summary>
        Private Shared m_o_cacheLock As New Object

        ''' <summary>
        ''' Cache Changes
        ''' </summary>
        Private Shared m_b_cacheHasChanges As Boolean = False

        ''' <summary>
        ''' Propriété du cache datatable
        ''' </summary>
        ''' <param name="p_o_trans">La transaction à utiliser</param>
        ''' <param name="p_b_force">Objet de la classe Veterinaire.</param>
        Public Shared ReadOnly Property CacheDt(Optional p_o_trans As transaction = Nothing, Optional p_b_force As Boolean = False) As Datatable
            Get
                SyncLock m_o_cacheLock
                    If m_o_cacheDt Is Nothing Or p_b_force Then
                        m_o_cacheDt = Nothing
                        Dim l_o_qry As Query = VITAL.Veterinaire.GetAll(p_o_trans)
                        m_o_cacheDt = l_o_qry.GetDT
                        Dim l_o_pkColumns As New List(Of DataColumn)
                        l_o_pkColumns.add(m_o_cacheDt.Columns(VITAL.VTL_VETERINAIRE.VTL_VETERINAIRE_ID))
                        m_o_cacheDt.PrimaryKey = l_o_pkColumns.ToArray
                        m_b_cacheHasChanges = False
                    End If
                    Return m_o_cacheDt
                End SyncLock
            End Get
        End Property

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        ''' <param name="p_o_object">Objet de la classe Veterinaire.</param>
        Private Shared Function CacheDtKey(p_o_object As VITAL.Veterinaire) As String
            Dim l_s_key As New System.Text.StringBuilder
            If l_s_key.Length <> 0 Then l_s_key.Append(" AND ")
            l_s_key.Append("VTL_VETERINAIRE_ID = " + p_o_object.ID.ToString())
            Return l_s_key.ToString()
        End Function

        ''' <summary>
        ''' Permet de constuire le select représentant la clé primaire pour le cache datatable
        ''' </summary>
        Private Shared Function CacheDtKeyFind(p_o_object As VITAL.Veterinaire) As object()
            Dim l_o_pkColumns As New List(Of Object)
            l_o_pkColumns.add(p_o_object.ID)
            Return l_o_pkColumns.ToArray
        End Function

        ''' <summary>
        ''' Permet mettre à jour le cache
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdate(p_b_delete As Boolean)
            SyncLock m_o_cacheLock
                CacheUpdateDt(p_b_delete)
                m_b_cacheHasChanges = True
            End SyncLock
        End Sub

        ''' <summary>
        ''' Permet mettre à jour le cache datatable
        ''' </summary>
        ''' <param name="p_b_delete">Indique si l'on vient du delete d'un objet ou non</param>
        Private Sub CacheUpdateDt(p_b_delete As Boolean)
            If Not m_o_cacheDt Is Nothing Then
                Dim l_o_dr As DataRow = m_o_cacheDt.Rows.Find(CacheDtKeyFind(CType(Me,VITAL.Veterinaire)))

                If p_b_delete Then
                    If Not l_o_dr Is Nothing Then
                        m_o_cacheDt.Rows.RemoveAt(m_o_cacheDt.Rows.IndexOf(l_o_dr))
                        m_o_cacheDt.AcceptChanges()
                    End If
                Else
                    If l_o_dr Is Nothing Then
                        Dim l_o_newDr As DataRow = m_o_cacheDt.NewRow
                        ToRow(l_o_newDr)
                        m_o_cacheDt.Rows.Add(l_o_newDr)
                    Else
                        ToRow(m_o_cacheDt.Rows.Item(m_o_cacheDt.Rows.IndexOf(l_o_dr)))
                        m_o_cacheDt.AcceptChanges()
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Permet vider le cache datatable
        ''' </summary>
        ''' <param name="p_b_force">Indique si l'on force le vidage ou non</param>
        Public Shared Sub CacheClear(Optional p_b_force As Boolean = True)
            If m_b_cacheHasChanges Or p_b_force Then
                SyncLock m_o_cacheLock
                    m_o_cacheDt = Nothing
                End SyncLock
            End If
        End Sub

#End Region

    End Class

#End Region

End Namespace
